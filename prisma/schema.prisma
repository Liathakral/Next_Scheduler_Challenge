// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../scheduler/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  googleId     String?  @unique
  email        String   @unique
  name         String?
  role         String   @default("buyer") // "seller" | "buyer"
  refreshToken String? // encrypted
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // relations
  // relations
  appointmentsAsSeller Appointment[]  @relation("sellerAppointments")
  appointmentsAsBuyer  Appointment[]  @relation("buyerAppointments")
  availabilities       Availability[]
}

model Appointment {
  id            String   @id @default(cuid())
  seller        User     @relation("sellerAppointments", fields: [sellerId], references: [id])
  sellerId      String
  buyer         User     @relation("buyerAppointments", fields: [buyerId], references: [id])
  buyerId       String
  start         DateTime
  end           DateTime
  status        String   @default("reserved") // reserved | confirmed | cancelled
  googleEventId String?
  hangoutLink   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([sellerId, start])
  @@index([sellerId])
  @@index([buyerId])
}

model Availability {
  id        String   @id @default(cuid())
  seller    User     @relation(fields: [sellerId], references: [id])
  sellerId  String
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now())

  @@index([sellerId])
}
